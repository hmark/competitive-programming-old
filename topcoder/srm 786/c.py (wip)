class SuffixDecomposition:
    def findTotalFun(self, P, A0, X, Y, B0, X1, Y1, N):
        A = [0] * N
        B = [0] * N
        A[0] = A0
        B[0] = B0

        for i in range(1, N):
            A[i] = (A[i-1] * X + Y) % 1812447359

        for i in range(1, N):
            B[i] = (B[i-1] * X1 + Y1) % 1812447359

        S = [0] * N
        for i in range(0, len(P)):
            S[i] = P[i]

        for i in range(len(P), N):
            S[i] = max(A[i], B[i])

        return


print(SuffixDecomposition().findTotalFun([10], 1, 2, 2, 3, 1, 2, 4))
print(SuffixDecomposition().findTotalFun([3, 9, 5], 0, 0, 0, 0, 0, 0, 3))
print(SuffixDecomposition().findTotalFun([], 1000001,
                                         1000001, 1000001, 5000001, 5000001, 5000001, 4))
print(SuffixDecomposition().findTotalFun([], 1812447358,
                                         1812447358, 1812447358, 42524, 2565262, 2676642, 6))
print(SuffixDecomposition().findTotalFun(
    [],  1010, 2010, 3010, 900010, 9000, 76540, 8))
